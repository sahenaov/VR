//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/NewInputSystem/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Control : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""Flashlight"",
            ""id"": ""05a8091e-a326-458e-8e2f-993ba7cb53cf"",
            ""actions"": [
                {
                    ""name"": ""FirstButton"",
                    ""type"": ""Button"",
                    ""id"": ""fc735f5f-b1c1-422e-988b-7b8e0725c5dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondButton"",
                    ""type"": ""Button"",
                    ""id"": ""91d7725a-bf57-4391-b842-ffed432fe234"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstButtonL"",
                    ""type"": ""Button"",
                    ""id"": ""929d5727-ff04-4681-95dc-2cc5028ac1c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondButtonL"",
                    ""type"": ""Button"",
                    ""id"": ""58c40958-a376-4fd5-9060-9cdb57bbdb55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3385c09a-19c6-4f47-832a-2aacf7f28cf3"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d1f8547-c785-411c-94c3-75dd38f4594f"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dc992df-455c-4601-b5c7-c843e9b62640"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstButtonL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c55cfff-034a-4ad5-bc82-391d03679c13"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondButtonL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Flashlight
        m_Flashlight = asset.FindActionMap("Flashlight", throwIfNotFound: true);
        m_Flashlight_FirstButton = m_Flashlight.FindAction("FirstButton", throwIfNotFound: true);
        m_Flashlight_SecondButton = m_Flashlight.FindAction("SecondButton", throwIfNotFound: true);
        m_Flashlight_FirstButtonL = m_Flashlight.FindAction("FirstButtonL", throwIfNotFound: true);
        m_Flashlight_SecondButtonL = m_Flashlight.FindAction("SecondButtonL", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flashlight
    private readonly InputActionMap m_Flashlight;
    private IFlashlightActions m_FlashlightActionsCallbackInterface;
    private readonly InputAction m_Flashlight_FirstButton;
    private readonly InputAction m_Flashlight_SecondButton;
    private readonly InputAction m_Flashlight_FirstButtonL;
    private readonly InputAction m_Flashlight_SecondButtonL;
    public struct FlashlightActions
    {
        private @Control m_Wrapper;
        public FlashlightActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstButton => m_Wrapper.m_Flashlight_FirstButton;
        public InputAction @SecondButton => m_Wrapper.m_Flashlight_SecondButton;
        public InputAction @FirstButtonL => m_Wrapper.m_Flashlight_FirstButtonL;
        public InputAction @SecondButtonL => m_Wrapper.m_Flashlight_SecondButtonL;
        public InputActionMap Get() { return m_Wrapper.m_Flashlight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlashlightActions set) { return set.Get(); }
        public void SetCallbacks(IFlashlightActions instance)
        {
            if (m_Wrapper.m_FlashlightActionsCallbackInterface != null)
            {
                @FirstButton.started -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnFirstButton;
                @FirstButton.performed -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnFirstButton;
                @FirstButton.canceled -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnFirstButton;
                @SecondButton.started -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnSecondButton;
                @SecondButton.performed -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnSecondButton;
                @SecondButton.canceled -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnSecondButton;
                @FirstButtonL.started -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnFirstButtonL;
                @FirstButtonL.performed -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnFirstButtonL;
                @FirstButtonL.canceled -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnFirstButtonL;
                @SecondButtonL.started -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnSecondButtonL;
                @SecondButtonL.performed -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnSecondButtonL;
                @SecondButtonL.canceled -= m_Wrapper.m_FlashlightActionsCallbackInterface.OnSecondButtonL;
            }
            m_Wrapper.m_FlashlightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FirstButton.started += instance.OnFirstButton;
                @FirstButton.performed += instance.OnFirstButton;
                @FirstButton.canceled += instance.OnFirstButton;
                @SecondButton.started += instance.OnSecondButton;
                @SecondButton.performed += instance.OnSecondButton;
                @SecondButton.canceled += instance.OnSecondButton;
                @FirstButtonL.started += instance.OnFirstButtonL;
                @FirstButtonL.performed += instance.OnFirstButtonL;
                @FirstButtonL.canceled += instance.OnFirstButtonL;
                @SecondButtonL.started += instance.OnSecondButtonL;
                @SecondButtonL.performed += instance.OnSecondButtonL;
                @SecondButtonL.canceled += instance.OnSecondButtonL;
            }
        }
    }
    public FlashlightActions @Flashlight => new FlashlightActions(this);
    public interface IFlashlightActions
    {
        void OnFirstButton(InputAction.CallbackContext context);
        void OnSecondButton(InputAction.CallbackContext context);
        void OnFirstButtonL(InputAction.CallbackContext context);
        void OnSecondButtonL(InputAction.CallbackContext context);
    }
}
